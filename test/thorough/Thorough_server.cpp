// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/Thorough.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TTransportUtils.h>
#include <concurrency/ThreadManager.h>
#include <concurrency/PosixThreadFactory.h>
#include <server/TNonblockingServer.h>

using namespace facebook::thrift;
using namespace facebook::thrift::protocol;
using namespace facebook::thrift::transport;
using namespace facebook::thrift::server;
using namespace facebook::thrift::concurrency;

using boost::shared_ptr;

using namespace thorough;

class ThoroughHandler : virtual public ThoroughIf {
 public:
  ThoroughHandler() {
  }

  void void_void() {
    printf ("in void_void\n");
  }

  bool bool_bool(const bool param) {
    printf ("in bool_bool\n");
    return param;
  }

  int8_t byte_byte(const int8_t param) {
    return param;
  }

  int16_t i16_i16(const int16_t param) {
    return param;
  }

  int32_t i32_i32(const int32_t param) {
    return param;
  }

  int64_t i64_i64(const int64_t param) {
    return param;
  }

  double double_double(const double param) {
    return param;
  }

  void string_string(std::string& _return, const std::string& param) {
    _return = param;
  }

  void number_none(const int32_t one, const int32_t two) {
  }

  void number_complete(const int32_t one, const int32_t two) {
  }

  void number_skip(const int32_t one, const int32_t two) {
  }

  void number_partial(const int32_t one, const int32_t two) {
  }

  void number_all(const int32_t one, const int32_t two) {
  }

  /* see eum comment in .thrift file
  Auto Auto_Auto(const Auto param) {
    return param;
  }
   */

  Complete Complete_Complete(const Complete param) {
    return param;
  }

  /* see eum comment in .thrift file
  Partial Partial_Partial(const Partial param) {
    return param;
  }

  Skip Skip_Skip(const Skip param) {
    return param;
  }

  All All_All(const All param) {
    return param;
  }
   */

  void SimpleBool_SimpleBool(SimpleBool& _return, const SimpleBool& param) {
    _return = param;
  }

  void SimpleByte_SimpleByte(SimpleByte& _return, const SimpleByte& param) {
    _return = param;
  }

  void SimpleI16_SimpleI16(SimpleI16& _return, const SimpleI16& param) {
    _return = param;
  }

  void SimpleI32_SimpleI32(SimpleI32& _return, const SimpleI32& param) {
    _return = param;
  }

  void SimpleI64_SimpleI64(SimpleI64& _return, const SimpleI64& param) {
    _return = param;
  }

  void SimpleDouble_SimpleDouble(SimpleDouble& _return, const SimpleDouble& param) {
    _return = param;
  }

  void SimpleString_SimpleString(SimpleString& _return, const SimpleString& param) {
    fprintf (stderr, "SimpleString_SimpleString: %s\n", param.value.c_str());
    _return = param;
  }

  void SimpleTypedef_SimpleTypedef(SimpleTypedef& _return, const SimpleTypedef& param) {
    _return = param;
  }

  void SimpleEnum_SimpleEnum(SimpleEnum& _return, const SimpleEnum& param) {
    _return = param;
  }

  void void_SimpleException(SimpleException& _return) {
    printf("returns_simple\n");
    _return.value.what = "simple exception";
  }

  void SimpleAll_SimpleAll(SimpleAll& _return, const SimpleAll& param) {
    fprintf (stderr, "SimpleAll_SimpleAll: %d %d %d %d %ld %f %s %f\n",
             param.value_bool, 
             param.value_byte, 
             param.value_i16, 
             param.value_i32, 
             param.value_i64, 
             param.value_double, 
             param.value_string.c_str(), 
             param.value_typedef);
    _return = param;
  }

  void InitsBool_InitsBool(InitsBool& _return, const InitsBool& param) {
    _return = param;
  }

  void InitsByte_InitsByte(InitsByte& _return, const InitsByte& param) {
    _return = param;
  }

  void InitsI16_InitsI16(InitsI16& _return, const InitsI16& param) {
    _return = param;
  }

  void InitsI32_InitsI32(InitsI32& _return, const InitsI32& param) {
    _return = param;
  }

  void InitsI64_InitsI64(InitsI64& _return, const InitsI64& param) {
    _return = param;
  }

  void InitsDouble_InitsDouble(InitsDouble& _return, const InitsDouble& param) {
    _return = param;
  }

  void InitsString_InitsString(InitsString& _return, const InitsString& param) {
    _return = param;
  }

  void InitsTypedef_InitsTypedef(InitsTypedef& _return, const InitsTypedef& param) {
    _return = param;
  }

  void InitsEnum_InitsEnum(InitsEnum& _return, const InitsEnum& param) {
    _return = param;
  }

  void InitsAll_InitsAll(InitsAll& _return, const InitsAll& param) {
    _return = param;
  }

  void TypedefsAll_TypedefsAll(TypedefsAll& _return, const TypedefsAll& param) {
    _return = param;
  }

  void NumberingAll_NumberingAll(NumberingAll& _return, const NumberingAll& param) {
    _return = param;
  }

  void HighMember_HighMember(HighMember& _return, const HighMember& param) {
    _return = param;
  }

  void list_i32_list_i32(std::vector<int32_t> & _return, const std::vector<int32_t> & param) {
    _return = param;
  }

  void list_string_list_string(std::vector<std::string> & _return, const std::vector<std::string> & param) {
    _return = param;
  }

  void list_SimpleI32_list_SimpleI32(std::vector<SimpleI32> & _return, const std::vector<SimpleI32> & param) {
    printf("list_SimpleI32_list_SimpleI32\n");
    _return = param;
  }

  void set_i32_set_i32(std::set<int32_t> & _return, const std::set<int32_t> & param) {
    std::set<int32_t, int32_t>::iterator i;
    for (i = param.begin(); i != param.end(); i++)
      fprintf (stderr, "s: %d\n", (*i));
    _return = param;
  }

  void set_string_set_string(std::set<std::string> & _return, const std::set<std::string> & param) {
    std::set<std::string, std::string>::iterator i;
    for (i = param.begin(); i != param.end(); i++)
      fprintf (stderr, "s: %s\n", (*i).c_str());
    _return = param;
  }

  void map_i32_map_i32(std::map<int32_t, int32_t> & _return, const std::map<int32_t, int32_t> & param) {
    _return = param;
  }

  void map_string_map_string(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & param) {
    _return = param;
  }

  void map_string_SimpleI32_map_string_SimpleI32(std::map<std::string, SimpleI32> & _return, const std::map<std::string, SimpleI32> & param) {
    printf("map_string_SimpleI32_map_string_SimpleI32\n");
    _return = param;
  }

  void throws_simple() {
    Simple e;
    e.what = "simple exception";
    throw e;
  }

  void throws_complex() {
    Complex e;
    e.what = "complex exception";
    e.count = 42;
    e.simple.value_bool = false;
    e.simple.value_byte = 1;
    e.simple.value_i16 = 2;
    e.simple.value_i32 = 3;
    e.simple.value_i64 = 4;
    e.simple.value_double = 5.5;
    e.simple.value_string = "hi";
    e.simple.value_typedef = HUMAN;
    throw e;
  }

  void throws_multiple_simple() {
    Simple e;
    e.what = "simple exception";
    throw e;
  }

  void throws_multiple_complex() {
    Complex e;
    e.what = "complex exception";
    e.count = 42;
    e.simple.value_bool = false;
    e.simple.value_byte = 1;
    e.simple.value_i16 = 2;
    e.simple.value_i32 = 3;
    e.simple.value_i64 = 4;
    e.simple.value_double = 5.5;
    e.simple.value_string = "hi";
    e.simple.value_typedef = HUMAN;
    throw e;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ThoroughHandler> handler(new ThoroughHandler());
  shared_ptr<TProcessor> processor(new ThoroughProcessor(handler));
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  shared_ptr<ThreadManager> threadManager =
    ThreadManager::newSimpleThreadManager (1);

  shared_ptr<PosixThreadFactory> threadFactory =
    shared_ptr<PosixThreadFactory>(new PosixThreadFactory ());

  threadManager->threadFactory (threadFactory);
  threadManager->start ();

  TNonblockingServer server (processor, protocolFactory,
                             port, threadManager);
  server.serve ();

  return 0;
}

